Tóm tắt các quy tắc cần nhớ
- Chỉ giữ lại bậc cao nhất (nếu là đa thức).
- Bỏ hằng số (như O(5N) ⇒ O(N)).
- So sánh tốc độ tăng trưởng để chọn cái “thống trị”.
    O(N! + N^2 + N) => O(N!)


1. Drop constants

    // Drop Constants
        public static void printItemsInCaseOfDropConstants (int n) {
            for (int i = 0; i < n; i++) {
                System.out.println(i);
            } [1] => O(N)

            for (int j = 0; j < n; j++) {
                System.out.println(j);
            } [2] => O(N)
        }

    Cả [1] & [2] đề có big O là O(N)
        => N + N = 2N
    Nhưng vì Big O bỏ qua hằng số (2 trong trường hợp trên là hằng số)
    -> Đơn giản hóa thành O(N)
    -> Chỉ quan tâm đến bậc của N.


2. Drop non-donimants

    // Drop Non-Dominants
        public static void printItemsInCaseOfDropNonDominants(int n) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    System.out.println(i + " " + j);
                }
            } [1] -> O(N^2)

            for (int k = 0; k < n; k++) {
                System.out.println(k);
            } [2] -> O(N)
        }

    Tổng của [1] và [2] là O( N^2 + N )

            Nhưng khi 'N' trở nên rất lớn, thành phần tăng nhanh nhất sẽ chi phối toàn bộ hiệu năng của thuật toán.
            -> Ảnh hưởng lớn đến các bước cần thiết

            Ví dụ khi N = 1000
                - N^2 -> 1.000.000 bước (aka "thành phần tăng nhanh nhất")
                - N -> 1000 bước (*)
               Trong trường hợp này ta thấy (*) không có ảnh hưởng quá lớn tới hiệu năng của thuật toán.
                 '1000 chỉ là con số nhỏ đối với 1.000.000'

               -> Lược bỏ phần không quan trọng/không ảnh hưởng quá lớn tới hiệu năng,
                và giữ lại thành phần quan trọng - "có ảnh hướng lớn đến số bước/hiệu năng của thuật toán".

    Trong trường hợp này Big O của nó sẽ bằng O(N^2).