1. Big O Notation:
    - là cách để biểu diễn độ phức tạp của thuật toán.
    - là cách để so sánh độ hiệu quả của thuật toán khi chạy.
    - là cách để đánh giá xu hướng tốc độ tăng trưởng khi N (input size) lớn.
    - là 1 dạng đơn vị đo lường.

    - Big O biểu diễn độ phức tạp của thuật toán thông qua:
        - Time Complexity.
        - Space Complexity.

    a. Time complexity:
        - Không đo tốc độ nhanh hay chậm (về thời gian).
        - Chỉ đo tốc độ tăng của số bước cần thiết mà thuật toán phải thực hiện khi input tăng.
        -> Đo tốc độ tăng trưởng/phình to của thuật toán khi N tăng.

            Ví dụ: Duyệt qua tất cả các phần tử.
                   Ban đầu N = 100 và tăng GẤP ĐÔI input.

                -Với O(logN) - với log cơ số 2:
                    default: 100 -> Số bước cần để hoàn thành khoảng 12 bước
                    after: 200 -> Số bước cần để hoàn thành khoảng 16 bước
                    -> Số bước cần thiết để thuật toán hoàn thành 1 task => Tăng không quá nhiều.
                        -> Có thể đánh giá đây là 1 thuật toán tốt.

                - Với O(N):
                    default: 100
                    after: 200
                    -> Số bước cần thiết để thuật toán hoàn thành 1 task => Tăng x2 lần.

                - Với O(N^2):
                     default: 100 -> 10.000 (Với N = 100, thuật toán cần 10.000 bước để xử lý)
                     after: 200 -> 40.000 (Với N = 200, thuật toán cần 40.000 bước để xử lý)
                     -> Số bước cần thiết để thuật toán hoàn thành 1 task => Tăng x4 lần.

    b. Space complexity:
        - Đo lường bộ nhớ bổ sung mà thuật toán cần để chạy.
            - Biến phụ -> Tính là O(1).
            - Mảng tạm (array), Object mới, ... -> Tính là O(N).

2. Tại sao là Big O?
    - Khi làm việc về Time/Space Complexity, người ta thường dùng các chữ cái Hy Lạp
    để biểu diễn:
        - Best case - Omega - Ω
        - Average case - Theta - θ
        - Worst case - Omicron - O

    Big O -> Worst case. Vì sao dùng Worst case để biểu diễn độ phức tạp của thuật toán?
        - Dễ kiểm soát mức độ tăng của số bước cần thiết để hoàn thành 1 task.
            (Trong vùng chấp nhận được)

        Ví dụ: Tìm 'x' trong mảng có 100 phần tử chưa được sắp xếp. arr[100]{12,41,...,67,64};
            Trong trường hợp tệ nhất thuật toán sẽ mất 100 bước để tìm kiếm 'x' (Worst case -> 100 bước).

            Nhưng vì không phải lúc nào thuật toán cũng sẽ mất 100 bước để tìm ra 'x'
                Mà có thể là -> 5 bước
                             -> 15 bước
                             -> 77 bước
                             ...

            -> Do đã lấy worst case làm mốc để biểu diễn, nên tất cả các trường hợp có
            thể xảy ra đều đã được cover.

    Dù tăng input lớn bao nhiêu đi nữa, thì số bước cần để hoàn thành 1 task, luôn được
    duy trì từ mức Worst case trở xuống.